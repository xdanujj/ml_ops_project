name: Databricks CI/CD Pipeline

on:
  push:
    branches: [ main ]  # Trigger on push to main branch

jobs:
  build-train-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1️⃣: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2️⃣: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3️⃣: Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest databricks-cli

      # Step 4️⃣: Run tests
      - name: Run tests
        run: pytest tests/

      # Step 5️⃣: Configure and Trigger Databricks Job
      - name: Configure and Trigger Databricks Job
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          DATABRICKS_JOB_ID: ${{ secrets.DATABRICKS_JOB_ID }}
        shell: bash
        run: |
          echo "🚀 Setting up Databricks CLI..."

          mkdir -p ~/.databricks
          # ✅ Safe heredoc syntax (no YAML parsing errors)
          cat > ~/.databricks/config <<EOF
[DEFAULT]
host = ${DATABRICKS_HOST}
token = ${DATABRICKS_TOKEN}
EOF

          echo "✅ Databricks CLI configured."

          echo "🔁 Upgrading to Jobs API 2.1..."
          databricks jobs configure --version=2.1

          echo "🚀 Triggering Databricks job..."
          databricks jobs run-now --job-id "${DATABRICKS_JOB_ID}"

          echo "✅ Databricks job triggered successfully!"

      # Step 6️⃣ (Optional): Build and Push Docker Image
      - name: Build and Push Docker Image
        if: success()
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        run: |
          if [ -z "$DOCKER_USER" ] || [ -z "$DOCKER_PASS" ]; then
            echo "⚠ Docker credentials not found, skipping Docker build."
            exit 0
          fi

          echo "🐳 Building Docker image..."
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker build -t $DOCKER_USER/crop-rec-model:latest .
          docker push $DOCKER_USER/crop-rec-model:latest
          echo "✅ Docker image pushed successfully!"